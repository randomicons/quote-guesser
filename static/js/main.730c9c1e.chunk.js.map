{"version":3,"sources":["App.module.scss","Stats.js","utils.js","QuoteGuesser.js","customHook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Stats","props","percents","names","name","answered","correct","console","log","JSON","stringify","onClick","closeStats","data","x","Object","keys","y","values","type","marker","line","width","layout","title","height","config","responsive","shuffle","array","i","length","j","Math","floor","random","getRandom","arr","n","result","Array","len","taken","RangeError","QuoteGuesser","useState","questionNum","setQuestionNum","quote","setQuote","choices","setChoices","numCorrect","setNumCorrect","answerMode","setAnswerMode","showStats","setShowStats","loading","setLoading","chat","appBasePath","useEffect","a","axios","get","temp","tempChoices","filter","Name","alert","nameStats","nameStatsCorrect","answeredStats","setAnsweredStats","correctStats","setCorrectStats","useStats","addStats","className","styles","App","container","Message","map","disabled","wrong","e","target","style","source","createHashSource","history","createHistory","path","Home","display","flexDirection","justifyContent","alignItems","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.730c9c1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"container\":\"App_container__eSJ6i\",\"numCorrect\":\"App_numCorrect__247Y2\",\"wrong\":\"App_wrong__39jjm\",\"correct\":\"App_correct__11DbC\"};","import React from \"react\"\nimport Plot from \"react-plotly.js\"\n\nexport default function Stats(props) {\n  const percents = {}\n  for (const name of props.names) {\n    if (props.answered[name] !== 0)\n      percents[name] = props.correct[name] / props.answered[name]\n  }\n  console.log(JSON.stringify(percents), props)\n  return (\n    <>\n      <button onClick={props.closeStats}>Back</button>\n      {\n        <Plot\n          data={[\n            {\n              x: Object.keys(percents),\n              y: Object.values(percents),\n              type: \"bar\",\n              marker: {\n                line: {\n                  width: \"2.5\",\n                },\n              },\n            },\n          ]}\n          layout={{title: \"Percent Correct\", width: \"1024\", height: \"800\"}}\n          config={{responsive: true}}\n        />\n      }\n    </>\n  )\n}\n","export function shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]\n  }\n  return array\n}\n\nexport function getRandom(arr, n) {\n  let result = new Array(n),\n    len = arr.length,\n    taken = new Array(len)\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\")\n  while (n--) {\n    const x = Math.floor(Math.random() * len)\n    result[n] = arr[x in taken ? taken[x] : x]\n    taken[x] = --len in taken ? taken[len] : len\n  }\n  return result\n}\n","import React, {useEffect, useState} from \"react\"\nimport styles from \"./App.module.scss\"\nimport axios from \"axios\"\nimport Stats from \"./Stats\"\nimport {useStats} from \"./customHook\"\nimport {getRandom, shuffle} from \"./utils\"\n\nfunction QuoteGuesser(props) {\n  const [questionNum, setQuestionNum] = useState(1)\n  const [quote, setQuote] = useState(\"\")\n  const [choices, setChoices] = useState([])\n  const [numCorrect, setNumCorrect] = useState(0)\n  const [answerMode, setAnswerMode] = useState(false)\n  const [showStats, setShowStats] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const names =\n    props.chat === \"alderwood\"\n      ? [\"Arsh Singh\", \"Enrico Borba\", \"Michael Opara\", \"Siddhu Kannan\", \"Sriram Bhat\"]\n      : [\n          \"Shawn N\",\n          \"Justin John\",\n          \"Wyeth Johann Villanueva\",\n          \"Siddhu Kannan\",\n          \"Sriram Bhat\",\n          \"Haiming Gao\",\n          \"Alonzo Quintero\",\n          \"Shreyas More\",\n          \"Robert Yu\",\n          \"Arjun Moola\",\n          \"Arsh Singh\",\n          \"Duc Huynh\",\n          \"Ben Ghaffar\",\n          \"Andrew Nguyen\",\n          \"John Oh\",\n          \"Sridhar Srinivasan\",\n          \"Philemon Ghebrehiwet\",\n          \"Marcus Mohammadi\",\n          \"Matthew Tegegne\",\n          \"Omar Abdurahman\",\n          \"Ali Karim\",\n          \"Allen Kim\",\n          \"Jarrett Taylor\",\n          \"Shaan Bisht\",\n          \"Sydney Streun\",\n          \"Naishur Malhotra\",\n          \"Facebook User\",\n          \"Steve Chen\",\n          \"Vinson Nguyen\",\n          \"Matt Mettler\",\n          \"Su Minh Tran\",\n        ]\n  const appBasePath = `https://row-boat-chat.herokuapp.com/random?${\n    props.chat === \"alderwood\" ? \"chat=alderwood\" : \"\"\n  }`\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const temp = (await axios.get(`${appBasePath}`)).data\n        setQuote(temp)\n        const tempChoices = getRandom(\n          names.filter(name => name !== temp.Name),\n          3\n        )\n        setChoices(shuffle([...tempChoices, temp.Name]))\n        setLoading(false)\n      } catch (e) {\n        alert(e)\n        setChoices(choices)\n      }\n    })()\n    setLoading(true)\n  }, [setChoices, questionNum, setQuote])\n  const [addStats, nameStats, nameStatsCorrect] = useStats(names)\n\n  return (\n    <div className={styles.App}>\n      {showStats ? (\n        <div className={styles.container}>\n          <Stats\n            names={names}\n            answered={nameStats}\n            correct={nameStatsCorrect}\n            closeStats={() => setShowStats(false)}\n          />\n        </div>\n      ) : (\n        <div className={styles.container}>\n          <h1>Who said it?</h1>\n          <button onClick={() => setShowStats(true)}>Show stats</button>\n          <p>\n            <span className={styles.numCorrect}>{numCorrect}</span>/ {questionNum}\n          </p>\n          {!loading && (\n            <>\n              <p className={styles.quote}>{quote.Message}</p>\n              <ul>\n                {choices.map(name => {\n                  if (name === quote.Name)\n                    return (\n                      <button\n                        className={answerMode ? styles.correct : \"\"}\n                        onClick={() => {\n                          setNumCorrect(numCorrect + 1)\n                          setAnswerMode(true)\n                          addStats(name, true)\n                        }}\n                        disabled={answerMode}\n                      >\n                        {name}\n                      </button>\n                    )\n                  else\n                    return (\n                      <button\n                        className={answerMode ? styles.wrong : \"\"}\n                        onClick={e => {\n                          setAnswerMode(true)\n                          e.target.style = \"background: #b55c5c\"\n                          addStats(name, false)\n                        }}\n                        disabled={answerMode}\n                      >\n                        {name}\n                      </button>\n                    )\n                })}\n              </ul>\n            </>\n          )}\n          {answerMode && (\n            <div>\n              <button\n                onClick={() => {\n                  setAnswerMode(false)\n                  setQuestionNum(questionNum + 1)\n                }}\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default QuoteGuesser\n","import {useState} from \"react\"\n\nexport function useStats(names) {\n  const nameStats = {}\n  for (const name of names) {\n    nameStats[name] = 0\n  }\n  const nameStatsCorrect = {}\n  for (const name of names) {\n    nameStatsCorrect[name] = 0\n  }\n\n  const [answeredStats, setAnsweredStats] = useState(nameStats)\n  const [correctStats, setCorrectStats] = useState(nameStatsCorrect)\n\n  const addStats = (name, correct) => {\n    answeredStats[name]++\n    setAnsweredStats({...answeredStats})\n    if (correct) {\n      correctStats[name]++\n      setCorrectStats({...correctStats})\n    }\n  }\n  return [addStats, answeredStats, correctStats]\n}\n","import React from \"react\"\nimport {createHistory, Link, LocationProvider, Router} from \"@reach/router\"\nimport QuoteGuesser from \"./QuoteGuesser\"\nimport createHashSource from \"hash-source\"\n\nlet source = createHashSource()\nlet history = createHistory(source)\n\nexport function App() {\n  return (\n    <LocationProvider history={history}>\n      <Router>\n        <QuoteGuesser chat=\"indiarowboat\" path={\"/indiarowboat\"} />\n        <QuoteGuesser chat=\"alderwood\" path={\"/alderwood\"} />\n        <Home path={\"/\"} />\n      </Router>\n    </LocationProvider>\n  )\n}\n\nfunction Home() {\n  return (\n    <main\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <Link to={\"alderwood\"}>Adlerwood</Link>\n      <Link to={\"indiarowboat\"}>India Row boat</Link>\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport {App} from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}